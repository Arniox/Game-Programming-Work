#include "ParticleManager.h"



ParticleManager::ParticleManager()
	:explosions(0)
{
}
ParticleManager::~ParticleManager()
{
	//Destroy and clean the explosion pool
	for (int i = 0; i < explosions.size(); ++i) {
		delete explosions.at(i);
		explosions.at(i) = 0;
	}
}

void
ParticleManager::Initialise(BackBuffer * backBuffer)
{
	m_backBuffer = backBuffer;
	//Init the particle pool
	for (int i = 0; i < MAX_PARTICLES; ++i) {
		m_explosions[i].Initialise(m_backBuffer->CreateSprite("assets/Sprites/explosionParticle.png"));
	}
}

void
ParticleManager::Process(float deltaTime, bool& explode, std::vector<std::vector<int>*>& explosionCoords, int windowWidth, int windowHeight)
{
	if (explode) {
		//Create new explosion for all exploion coords saved
		for (int i = 0; i < explosionCoords.size(); ++i) {
			for (int k = 0; k < 100; ++k) {
				//In use now
				explosions.push_back(new ExplosionParticle());
				explosions.back()->Initialise(m_backBuffer->CreateSprite("assets/Sprites/explosionParticle.png"));
				explosions.back()->SetCenter(explosionCoords.back()->front(), explosionCoords.back()->back());
				explosions.back()->dead = false;
			}
		}
	}

	//Only process living particles
	for (int t = 0; t < explosions.size(); ++t) {
		//if alive check
		if (!explosions.at(t)->dead) {
			explosions.at(t)->Process(deltaTime, windowWidth, windowHeight);
		} 
		else { //Kill dead
			explosions.erase(explosions.begin() + t);
		}
	}
}

void
ParticleManager::Draw(BackBuffer & backBuffer)
{
	//Only draw living explosion particles
	for (int t = 0; t < explosions.size(); ++t) {
		//if alive check
		if (!explosions.at(t)->dead) {
			explosions.at(t)->Draw(backBuffer);
		}
	}
}
